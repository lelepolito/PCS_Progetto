#pragma once

#include <iostream>
#include <vector>
#include <gtest/gtest.h>

#include "Utils.hpp"
#include "Eigen/Eigen"
#include "struttura.hpp"
#include "Utils.hpp"

using namespace Eigen;
using namespace PolyhedronLibrary;

TEST(TestPolyhedron, TestCentralize1)
{	
    PolyhedralMesh mesh;
	int n=6;
	mesh.NumCell0Ds = n;
	MatrixXd matrice(3,n);
	matrice <<  
     0.593, -0.711,  0.322, -0.112,  0.001,  0.689,
     0.463,  0.245, -0.832, -0.408,  0.863, -0.655,
     0.659,  0.658,  0.451,  0.906, -0.505,  0.316;
	mesh.cell0Ds_coordinates = matrice.eval();
	PolyhedralMesh meshNorm;
	meshNorm.NumCell0Ds = n;
	meshNorm.Cell0DsCoordinates = mesh.Cell0DsCoordinates;
    Normalize(mesh);
	bool test = mesh.Cell0DsCoordinates.isApprox(meshNorm.Cell0DsCoordinates,1e-5);
	EXPECT_TRUE(test);
}

TEST(TestPolyhedron, TestCentralize2)
{	
    PolyhedralMesh mesh;
	int n=6;
	mesh.NumCell0Ds = n;
	MatrixXd matrice(3,n);
	matrice <<
    0.593 * 4.2,  -0.711 * 9.1,   0.322 * 2.8,  -0.112 * 6.7,   0.001 * 1.3,   0.689 * 7.5,
    0.463 * 4.2,   0.245 * 9.1,  -0.832 * 2.8,  -0.408 * 6.7,   0.863 * 1.3,  -0.655 * 7.5,
    0.659 * 4.2,   0.658 * 9.1,   0.451 * 2.8,   0.906 * 6.7,  -0.505 * 1.3,   0.316 * 7.5;
	mesh.cell0Ds_coordinates = matrice.eval();
    Normalize(mesh);
	PolyhedralMesh meshNorm;
	meshNorm.NumCell0Ds = n;
	MatrixXd matrice2(n,3);
	matrice2 <<  
    0.593, -0.711,  0.322, -0.112,  0.001,  0.689,
    0.463,  0.245, -0.832, -0.408,  0.863, -0.655,
    0.659,  0.658,  0.451,  0.906, -0.505,  0.316;
	meshNorm.cell0Ds_coordinates = matrice2.eval();
	bool test = mesh.Cell0DsCoordinates.isApprox(meshNorm.Cell0DsCoordinates,1e-5);
	EXPECT_TRUE(test);
}